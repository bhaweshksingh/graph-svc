// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"graph-svc/pkg/graphinfo/model"
	"graph-svc/pkg/repository"
	"sync"
)

// Ensure, that GraphRepositoryMock does implement repository.GraphRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.GraphRepository = &GraphRepositoryMock{}

// GraphRepositoryMock is a mock implementation of repository.GraphRepository.
//
// 	func TestSomethingThatUsesGraphRepository(t *testing.T) {
//
// 		// make and configure a mocked repository.GraphRepository
// 		mockedGraphRepository := &GraphRepositoryMock{
// 			GetChartDataFunc: func(ctx context.Context) ([]model.DataPoint, error) {
// 				panic("mock out the GetDataPoints method")
// 			},
// 		}
//
// 		// use mockedGraphRepository in code that requires repository.GraphRepository
// 		// and then make assertions.
//
// 	}
type GraphRepositoryMock struct {
	// GetChartDataFunc mocks the GetDataPoints method.
	GetChartDataFunc func(ctx context.Context) ([]model.DataPoint, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetDataPoints holds details about calls to the GetDataPoints method.
		GetChartData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetChartData sync.RWMutex
}

// GetDataPoints calls GetChartDataFunc.
func (mock *GraphRepositoryMock) GetDataPoints(ctx context.Context) ([]model.DataPoint, error) {
	if mock.GetChartDataFunc == nil {
		panic("GraphRepositoryMock.GetChartDataFunc: method is nil but GraphRepository.GetDataPoints was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetChartData.Lock()
	mock.calls.GetChartData = append(mock.calls.GetChartData, callInfo)
	mock.lockGetChartData.Unlock()
	return mock.GetChartDataFunc(ctx)
}

// GetChartDataCalls gets all the calls that were made to GetDataPoints.
// Check the length with:
//     len(mockedGraphRepository.GetChartDataCalls())
func (mock *GraphRepositoryMock) GetChartDataCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetChartData.RLock()
	calls = mock.calls.GetChartData
	mock.lockGetChartData.RUnlock()
	return calls
}
